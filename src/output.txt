app/home/page.tsx:
<Start of file>
'use client';

import ProtectedRoute from "@/components/ProtectedRoute"
import Link from "next/link";
import { useAuth } from "../contexts/AuthContext";
import { useEffect, useState } from "react";
import { fetchBoards } from "../actions/boardActions";
import Options from "@/components/options/Options";
import { deleteBoard } from "../actions/boardActions";
import Loading from "@/components/Loading";
import Header from "@/components/Header";



export default function HomePage() {
    const { user } = useAuth();
    const [boards, setBoards] = useState<any[]>([]);
    const [loading, setLoading] = useState<boolean>(true);

    useEffect(() => {
        if (user) {
            fetchBoards(user.uid)
                .then((fetchedBoards) => {
                    setBoards(fetchedBoards);
                    setLoading(false);
                })
                .catch((error) => {
                    console.error("Error fetching boards:", error);
                    setLoading(false);
                });
        }
    }, [user]);

    async function handleDelete(boardId: string) {
        if (!user?.uid) return;

        try {
            await deleteBoard(user.uid, boardId);
            setBoards((prevBoards) => prevBoards.filter((board) => board.id !== boardId));
        } catch (error) {
            console.error("Error deleting board:", error);
            alert("Failed to delete board. Please try again.");
        }
    }

    if (loading) {
        return <Loading />;
    }

    return (
        <ProtectedRoute>
            <div className="p-3">
                <h1 className="text-4xl mb-4">My Boards</h1>
                <hr className="mb-4" />

                {/* <Link
                    className="btn-primary inline-block mb-6 px-4 py-2 rounded text-white hover:bg-blue-700 transition-colors"
                    href={'/create-board'}
                >
                    Create New Board &rarr;
                </Link> */}

                {/* Displaying users' boards */}
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {boards.map((board) => (
                        <div
                            key={board.id}
                            className="relative bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow p-6 flex flex-col"
                        >
                            {/* Options Button */}
                            <div className="absolute top-1 right-2">
                                <Options
                                    boardId={board.id}
                                    onDelete={() => handleDelete(board.id)}
                                    onEdit={async () => {
                                        console.log("Editing board...");
                                        // to be implemented
                                    }}
                                />
                            </div>

                            {/* Board Name */}
                            <Link href={`/users/${user?.uid}/boards/${board.id}`} className="mt-2">
                                <h2 className="text-2xl font-bold text-gray-800">
                                    {board.name}
                                </h2>

                                {/* Underline */}
                                <div className="w-full h-1 bg-blue-300 mt-2 rounded"></div>

                                {/* Board Description */}
                                <p className="text-gray-600 mt-4 flex-1">
                                    {board.description || "No description provided."}
                                </p>
                            </Link>
                        </div>
                    ))}
                </div>
            </div>
        </ProtectedRoute>
    );
}<End of file>

app/contexts/AuthContext.tsx:
<Start of file>
'use client';
import { createContext, useContext, useEffect, useState } from 'react';
import { onAuthStateChanged, User } from 'firebase/auth';
import { auth } from '@/app/utils/firebaseConfig';
import { signInWithEmailAndPassword, signOut } from 'firebase/auth';

type AuthContextType = {
    user: User | null;
    userId: string | null;
    loading: boolean;
    login: (email: string, password: string) => Promise<void>;
    logout: () => Promise<void>;
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
    const [user, setUser] = useState<User | null>(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        // use onAuthStateChanged to listen to authentication state change
        const unsubscribe = onAuthStateChanged(auth, (user) => {
            setUser(user);
            setLoading(false);
        });
        // clean up after unmount
        // in react unmounting means when the component is no longer being rendered i.e. when the user logs out we no 
        // longer need to render the header thus it's unmounted
        return () => unsubscribe();
    }, []);

    const login = async (email: string, password: string) => {
        await signInWithEmailAndPassword(auth, email, password);
    };

    const logout = async () => {
        await signOut(auth);
    };

    return (
    <AuthContext.Provider value={{ user, userId: user?.uid || null, loading, login, logout }}>
        {children}
    </AuthContext.Provider>
    );
}

export function useAuth() {
    const context = useContext(AuthContext);
    if(!context) {
        throw new Error("[DEV Message]: useAuth must be used within an AuthProvider");
    }
    return context;
}<End of file>

app/utils/validationSchema.ts:
<Start of file>
import * as yup from "yup";

export const registrationSchema = yup.object().shape({
  email: yup
    .string()
    .email("Invalid email format")
    .required("Email is required")
    .matches(
        /^[a-zA-Z0-9._-]+@[a-zA-Z]+\.[a-zA-Z]+$/,
        "Invalid email format"
      ),
  password: yup
    .string()
    .min(8, "Password must be at least 8 characters")
    .required("Password is required")
    .matches(/[A-Z]/, "Password must contain at least one uppercase letter")
    .matches(/[a-z]/, "Password must contain at least one lowercase letter")
    .matches(/[0-9]/, "Password must contain at least one number"),
  username: yup
      .string()
      .min(6, "Username must be at least 6 characters")
      .required("Username is required"),
});<End of file>

app/utils/firebaseConfig.ts:
<Start of file>
// Import the functions you need from the SDKs you need
import { initializeApp, getApps, getApp } from "firebase/app";
import { getAuth, GoogleAuthProvider } from 'firebase/auth';
import { getFirestore } from "firebase/firestore";

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
// all kept in .env
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_MEASUREMENT_ID,
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const googleProvider = new GoogleAuthProvider();
const db = getFirestore(app);

export { auth, googleProvider, db };<End of file>

app/register/page.tsx:
<Start of file>
import Register from '@/components/authentication/Register';

export default function RegisterPage() {
    return (
        <div className='h-[80vh] mx-auto my-auto'>
            <Register/>
        </div>
    );
}<End of file>

app/create-board/page.tsx:
<Start of file>
'use client';

import { useAuth } from "../contexts/AuthContext";
import { useRouter } from "next/navigation";
import { createBoard } from "../actions/boardActions";

export default function CreateBoardPage() {
    // const { user } = useAuth(); // fetch current user authentication
    const { user } = useAuth();
    const router = useRouter();

    async function handleSubmit(formData: FormData) {
        const boardName = formData.get('name')?.toString() || ''; // makes ts happy because we control such that if it's not a string or it's undefined we make sure it's a string, function definition will prevent it anyways
        const boardDescription = formData.get('description')?.toString() || '';

        // Ensure user is authenticated
        if (!user) {
            throw new Error("User must be authenticated to create a board.");
        }

        // create board in firestore
        const { id } = await createBoard(user.uid, boardName, boardDescription);
        router.push(`users/${user.uid}/boards/${id}`);
    }

    return (
        <div className="p-2">
            <form action={handleSubmit} className="max-w-xs block">
                <h1 className="text-2xl mb-3">Create new board</h1>
                <input type="text" name="name" placeholder="Board name" className="rounded"/>
                <input type="text" name="description" placeholder="Brief description" className="text-base my-2 rounded"/>
                {/* <textarea id="w3review" name="w3review" rows={3} className="text-base my-2 rounded" placeholder="Board description"></textarea> */}
                <button type="submit" className="btn-primary mt-1">Create board</button>
            </form>
        </div>
    );
}<End of file>

app/layout.tsx:
<Start of file>
import "./globals.css";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { AuthProvider } from '@/app/contexts/AuthContext';
import Header from "@/components/Header";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Trello Clone",
  description: "A Trello-like application built with Next.js and Tailwind CSS",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {


  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased flex flex-col h-screen overflow-hidden`}
      >
        <AuthProvider>
          <Header/>
          <main className="flex-1 flex overflow-x-auto bg-gray-100 p-4">{children}</main>
        </AuthProvider>
      </body>
    </html>
  );
}<End of file>

app/users/[userId]/boards/[boardId]/page.tsx:
<Start of file>
// this is an optional page and this means that we can change the layout of board specific pages
// I'm not going to implement this right now because I don't think this is the main purpose of the project
// The use case here can be that while in "work mode" we might use a different layout than the main pages i.e. when we're inside a
// board we might like to put the header somewhere differently, we might want to add additioanl sections than the ones in the app etc.


// IMPORTANT: the dynamic routting has to be set up exactly like the collection in firebase
import React from 'react';
import BoardClient from '@/components/boards/BoardClient';
import ProtectedRoute from '@/components/ProtectedRoute';

type BoardPageProps = {
    params: Promise<{
        boardId: string; // will be used to specify dynamic board route
    }>;
};

export default async function BoardPage({ params }: BoardPageProps) {
    const {boardId} = await params; // params are asynchronious in nextjs 15
    
    return (
        <ProtectedRoute>
            <BoardClient boardId={boardId}/>
        </ProtectedRoute>
    )
}<End of file>

app/actions/columnActions.ts:
<Start of file>
import { db } from "../utils/firebaseConfig";
import { deleteDoc, doc, updateDoc } from 'firebase/firestore';

export type Column = {
    id: string;
    name: string;
    order?: number;
    createdAt?: any;
};


  // this function is not implemented properly, it would be better if the delete column deletes all cards associated with the column
  // since where I use this function I already have the list of cards, there is no reason why I should do this here
export async function deleteColumn(userId: string, boardId: string, columnId: string){
    if(!userId) return;

    const ref = doc(db, `users/${userId}/boards/${boardId}/columns/${columnId}`);
    await deleteDoc(ref);
}

export async function updateColumn(
    userId: string,
    boardId: string,
    columnId: string,
    data: Partial<Column>
  ) {
    if(!userId) return;
    const ref = doc(db, `users/${userId}/boards/${boardId}/columns/${columnId}`);
    await updateDoc(ref, data);
  }<End of file>

app/actions/boardActions.ts:
<Start of file>
import { db } from '@/app/utils/firebaseConfig';
import { query, getDocs, updateDoc, addDoc, collection, serverTimestamp, doc, getDoc, Transaction, orderBy, deleteDoc } from 'firebase/firestore';
import { runTransaction } from 'firebase/firestore'; // this is just for testing the transaction function of firestore, and is not that important for this demo
import { Column as ColumnType } from "./columnActions";


type CreateBoardResult = {
    id: string;
};

export type Board = {
    id: string;
    name: string;
    description: string;
    createdAt: any;
    columnCount?: number;
}

export type Card = {
    id: string;
    title: string;
    description?: string;
    comments?: string[];
    columnId?: string;
    order: number;
    createdAt?: any;
    updatedAt?: any;
}

type ColumnInput = Omit<ColumnType, 'id' | 'createdAt'>;

type CardInput = Omit<Card, 'id' | 'createdAt'>;
// Omit means same as card but without second argument



export async function createBoard(userId:string, name: string, description: string) : Promise<CreateBoardResult> {
    // reference of boards subcollection for userId, under users collection
    const boardsCollection = collection(db, `users/${userId}/boards`);

    try {
        // add new board document to firestore
        const docRef = await addDoc(boardsCollection, {
            name,
            description,
            createdAt: serverTimestamp(), // creation timestamp 
            columnCount: 0,
        });

        const boardPath = `users/${userId}/boards/${docRef.id}`;
        const columnsCollection = collection(db, `${boardPath}/columns`);
        const cardsCollection = collection(db, `${boardPath}/cards`);

        await Promise.all([
            addDoc(columnsCollection, { placeholder: true }).catch((err) => {
                console.error("Failed to create columns placeholder:", err);
            }),
            addDoc(cardsCollection, { placeholder: true }).catch((err) => {
                console.error("Failed to create cards placeholder:", err);
            }),
        ]);

        console.log("Document written with ID: ", docRef.id);

        return { id: docRef.id }; // return new board ID
      } catch (err) {
        console.error("Error adding document: ", err);
        throw new Error("Failed to create board. Please try again later.");
      }

}

// firestore doesn't cascade subcollection on delete, as they are all treated as seperate entities
// there are 3 options here: 1. delete each subcollection manually; 2. use a firebase extension; 
// 3. write a firebase server function (which will recursevilly delete all subcollections and documents etc) -> this is just writting the extension ourselves
// because I'm having some trouble installing the extension for some reason, I have decided to take the 1st approach
export async function deleteBoard(userId: string, boardId: string) {
    try {
        const boardPath = `users/${userId}/boards/${boardId}`;

        const boardRef = doc(db, boardPath);
        const columnsRef = collection(db, `users/${userId}/boards/${boardId}/columns`);
        const cardsRef = collection(db, `users/${userId}/boards/${boardId}/cards`);
        
        const columnsSnapshot = await getDocs(columnsRef);
        const cardsSnapshot = await getDocs(cardsRef);

        for(const column of columnsSnapshot.docs){
            await deleteDoc(column.ref);
        }

        for(const card of cardsSnapshot.docs){
            await deleteDoc(card.ref); // ref is the reference to that doc within the subcollection
        }

        // placing here because it will have no subcollections
        await deleteDoc(boardRef); 
    } catch (error) {
        console.error("Error deleteting board:", error);
        throw error;
    }
}

export async function createColumn(userId: string, boardId: string, columnName: string) : Promise<ColumnType> {
    // fetch board first, then fetch 
   const boardRef = doc(db, `users/${userId}/boards/${boardId}`);
   const columnRef = collection(boardRef, 'columns');

   return runTransaction(db, async (transaction) => {
    const boardSnap = await transaction.get(boardRef);
    if(!boardSnap.exists()) {
        throw new Error("Board doesn't exist.");
    }

    const boardData = boardSnap.data() as Board;
    const currentCount = boardData.columnCount ?? 0; // ?? if null turn 0, like in swift

    // create a new reference of the column in firestore and  set its' data
    const newColumnRef = doc(columnRef);
    transaction.set(newColumnRef, {
        name: columnName,
        order: currentCount,
        createdAt: serverTimestamp(),
    });

    transaction.update(boardRef, { columnCount: currentCount + 1});

    return {
        id: newColumnRef.id,
        name: columnName,
        order: currentCount,
    };
   });
}

export async function createCard(userId: string, boardId: string, cardData: CardInput) : Promise<Card> {
    const cardsCollection = collection(db, `users/${userId}/boards/${boardId}/cards`);

    try {
        const docRef = await addDoc(cardsCollection, {
            ...cardData,
            createdAt: serverTimestamp(),
        });
        console.log("Card created with ID: ", docRef.id);

        return { 
            id: docRef.id,
            ...cardData 
        };
    } catch (err) {
        console.error("Error adding card: ", err);
        throw new Error("Failed to create card. Please try again later.");
    }
}

export async function fetchBoards(userId: string) : Promise<Board[]> {
    const boardCollection = collection(db, `users/${userId}/boards`);
    const snapshot = await getDocs(boardCollection); // snapshot querry result from Firestore that 
    // contains metadata and data of the collection we're trying to fetch

    return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(), // spread rest of the document data as defined in Board
    })) as Board[];
}

export async function getBoard(userId: string, boardId: string) : Promise<Board> {
    // document reference so we can fetch it below
    const docRef = doc(db, `users/${userId}/boards/${boardId}`);
    const docSnap = await getDoc(docRef);

    if(!docSnap.exists()) {
        throw new Error("No such board found.");
    }

    return {
        id: boardId,
        ...(docSnap.data() as Omit<Board, 'id'>), // ensure it matches the Board type with Omit
    }
}

export async function getColumns(userId: string, boardId: string) : Promise<ColumnType[]> {
    const columnsRef = collection(db, `users/${userId}/boards/${boardId}/columns`);
    const columnsQuery = query(columnsRef, orderBy("order"));
    const snapshot = await getDocs(columnsQuery);

    return snapshot.docs
        .filter((doc) => !doc.data().placeholder) // ensure we don't return placeholders
        .map((doc) => ({
            id: doc.id,
            ...(doc.data() as Omit<ColumnType, 'id'>),
        }));
}

export async function getCards(userId: string, boardId: string) : Promise<Card[]> {
    const cardsRef = collection(db,`users/${userId}/boards/${boardId}/cards`);
    const snapshot = await getDocs(cardsRef);

    return snapshot.docs
        .filter((doc) => !doc.data().placeholder)    
        .map(doc => ({
        id: doc.id,
        ...(doc.data() as Omit<Card, 'id'>),
    }));
}
<End of file>

app/actions/cardActions.ts:
<Start of file>
import { db } from "../utils/firebaseConfig";
import { deleteDoc, doc, updateDoc, getDoc, collection, query } from 'firebase/firestore';

type UpdateCardData = {
    columnId?: string;
    order?: number;
    title?: string;
    description?: string;
    comments?: string[];
    updatedAt?: any;
}

export async function updateCard(userId: string, boardId: string, cardId: string, data:UpdateCardData) {
    if (!userId) return;

    const cardDocRef = doc(db, `users/${userId}/boards/${boardId}/cards/${cardId}`);
    await updateDoc(cardDocRef, data);
}

export async function deleteCard(userId: string, boardId: string, cardId:string) {
    if (!userId) return;

    const cardDocRef = doc(db, `users/${userId}/boards/${boardId}/cards/${cardId}`);
    await deleteDoc(cardDocRef);
}

export async function getCard(userId: string, boardId: string, cardId: string) {
    if(!userId) return;

    const cardDocRef = doc(db, `users/${userId}/boards/${boardId}/cards`, cardId);
    const snapshot = await getDoc(cardDocRef);


    if(!snapshot.exists()) {
        throw new Error("No such board found.");
    }

    return {
        id: snapshot.id,
        ...snapshot.data(),
    }
}<End of file>

app/page.tsx:
<Start of file>
'use client';

import LandingPage from "@/components/views/LandingPage";
import Loading from "@/components/Loading";
import { useRouter } from "next/navigation";
import { useEffect } from "react";
import { useAuth } from '@/app/contexts/AuthContext';



export default function Home() {
  const { user, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if(!loading && user) {
      router.push('/home');
    }
  }, [user,loading, router]);

  if(loading) return <Loading/>;

  return <LandingPage/>;
}
<End of file>

app/globals.css:
<Start of file>
/* app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  /* Ensure the body takes full height and doesn't introduce extra scroll */
  height: 100vh;
  overflow: hidden;
} 

@layer components {
  .btn-primary {
    @apply bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700;
  }

  .btn-secondary {
    @apply bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-700;
  }

  .btn-red {
    @apply text-white bg-red-500 hover:bg-red-700 py-2 px-4 rounded;
  }

  .btn-boards {
    @apply bg-indigo-500 text-white py-2 px-4 rounded hover:bg-indigo-700;
  }

  .card {
    @apply bg-white shadow-lg rounded p-6;
  }

  .alert {
    @apply bg-red-500 text-white font-bold py-3 px-4 rounded;
  }
}

.btn-google {
  @apply flex items-center justify-center space-x-2 rounded px-4 py-2;
  @apply bg-red-500 text-white hover:bg-red-600;
}

.center {
  text-align: center;
}

/* Optional: Customize scrollbars for better UX */
::-webkit-scrollbar {
  height: 8px;
  width: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f1f1; 
}

::-webkit-scrollbar-thumb {
  background: #888; 
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #555; 
}<End of file>

app/login/page.tsx:
<Start of file>
import Login from '@/components/Login';

export default function LoginPage() {
    return (
        <div className='h-[80vh] mx-auto my-auto'>
            <Login/>
        </div>
    );
}<End of file>

script.sh:
<Start of file>
#!/usr/bin/env bash

# Usage:
#   ./collect-files.sh /path/to/folder /path/to/output.txt

# The first argument is the folder to scan
FOLDER="$1"
# The second argument is the file in which we want to append the output
OUTPUT_FILE="$2"

# Clear or create the output file
> "$OUTPUT_FILE"

# Use 'find' to list all files (not directories) within $FOLDER, excluding the output file
find "$FOLDER" -type f ! -path "$OUTPUT_FILE" | while IFS= read -r FILE; do
  
  # Exclude .ico files
  if [[ "$FILE" == *.ico ]]; then
    echo "Skipping file: $FILE"
    continue
  fi
  
  # Ensure it's a regular file
  if [[ -f "$FILE" ]]; then
    # Derive the relative path by removing the leading "$FOLDER/"
    RELATIVE_PATH="${FILE#$FOLDER/}"
    
    # Append the relative path to the output file
    echo "$RELATIVE_PATH:" >> "$OUTPUT_FILE"
    
    echo "<Start of file>" >> "$OUTPUT_FILE"
    cat "$FILE" >> "$OUTPUT_FILE"
    echo "<End of file>" >> "$OUTPUT_FILE"
    
    # Add a blank line after each file
    echo >> "$OUTPUT_FILE"
  fi

done<End of file>

components/options/Options.tsx:
<Start of file>
"use client";
import { useState, useEffect, useRef } from 'react';


type OptionProps = {
    boardId?: string;
    onEdit?: () => Promise<void>;
    onDelete: () => Promise<void>;
    specialAction?: () => Promise<any>;
}

export default function Options({ onEdit, onDelete, specialAction } : OptionProps) {
    const [isOpen, setIsOpen] = useState(false);
    const menuRef = useRef<HTMLDivElement | null>(null); // reference for detecting outside clicks

    useEffect(() =>{
        function handleClickOutside(event: MouseEvent) {
            if(menuRef.current && !menuRef.current.contains(event.target as Node)) {
                setIsOpen(false);
            }
        }

        if(isOpen) {
            document.addEventListener("mousedown", handleClickOutside);
        }

        // cleanup on unmount
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        }
    }, [isOpen]);

    function toggleMenu() {
        setIsOpen((prev) => !prev); // cool way to avoid checking the state first, give me the opposite state of whatever it is
    };

    async function handleEdit() {
        if(onEdit){
            await onEdit();
            setIsOpen(false);
        }
    };

    async function handleDelete() {
        setIsOpen(false);
        await onDelete();
    };

    async function handleSpecialAction() {
        if(specialAction){
            setIsOpen(false);
            await specialAction();
        }
    };

    return (
        <div className='relative' ref={menuRef}>
            <button onClick={toggleMenu}
                className='flex items-center justify-center w-6 h-6 text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-0 rounded box-border'
                aria-haspopup='true'
                aria-label='Options'>
                <span className='flex items-center pb-3 justify-center h-full text-xl leading-none align-middle'>...</span>
            </button>

            {/* Toggled Menu */}
            {isOpen && (
                <div className='absolute right-0 mt-1 bg-white border rounded shadow-lg z-10 w-24'>
                    <button onClick={handleEdit} className="block w-full px-2 py-1 text-left text-sm text-gray-700 hover:bg-gray-100">
                        Edit
                    </button>
                    <button onClick={handleDelete} className="block w-full px-2 py-1 text-left text-sm text-red-600 hover:bg-red-100">
                        Delete
                    </button>
                    {specialAction && (
                        <button onClick={handleSpecialAction} className="block w-full px-2 py-1 text-left text-sm text-blue-600 hover:bg-blue-100">
                            Clear Cards
                        </button>
                    )}
                </div>
            )}
        </div>
    );
}<End of file>

components/Card.tsx:
<Start of file>
import { Card as CardType} from "@/app/actions/boardActions";
import { useRouter } from 'next/navigation';
import Options from "./options/Options";

type CardProps = {
    card: CardType;
    boardId: string;
    onDelete: (cardId: string) => Promise<void>;
}

export default function Card({ boardId, card, onDelete } : CardProps) {
    const router = useRouter();

    async function handleDelete(){
        if (typeof onDelete !== 'function') {
            console.error("onDelete prop is not a function:", onDelete);
            return;
        }
        await onDelete(card.id);
    }

    async function handleEdit(){
        // TO-DO: Implement redirecting to open the card menu
    }

    function handleOpenCard() {
        router.push(`?cardId=${card.id}`);
    }

    return (
        <div className="flex items-start justify-between border bg-white p-3 rounded-md shadow hover:bg-gray-50">
            <span onClick={handleOpenCard} className="flex-auto break-words">{card.title}</span>
            <Options boardId={boardId} onEdit={() => handleEdit()} onDelete={handleDelete}/>
        </div>
    );
}<End of file>

components/forms/FormColumn.tsx:
<Start of file>
// we explicitly mark a component to be a client component ('use client') as opposed to server component 
// because we rely on browser(client) specific interactivity e.g. onSubmit.
'use client';
import { FormEvent, useEffect, useRef } from "react";
import { createColumn} from "@/app/actions/boardActions";
import { useAuth } from "@/app/contexts/AuthContext";
import { Column } from '@/app/actions/columnActions';
import { useState } from "react";

 
type FormColumnProps = {
    boardId: string;
    onColumnCreated: (newColumn: Column) => void;
}


export default function FormColumn({ boardId, onColumnCreated } : FormColumnProps) {
    const [isAdding, setIsAdding] = useState(false);
    const [columnName, setColumnName] = useState<string>("");
    const { userId } = useAuth();
    const inputRef = useRef<HTMLInputElement>(null);

    useEffect(() => {
        if(isAdding && inputRef.current) {
            inputRef.current.focus();
        }
    }, [isAdding]);

    // async function handleNewColumn(event: FormEvent) {
    //     event.preventDefault();

    //     // Downcasting here since TypeScript treats event.target as EventTarget, so we're specifying it's type directly
    //     // So the 'as' keyword basically works in the following way, we're telling the TS compiler that "trust me I know this is of type X"
    //     // So we're explicitly telling the TS compiler that this var is of type X, so we can use querySelector without having type safety issues
    //     // the EventTarget doesn't have querySelector on the prototype chain so regular JS would just go down the prototype chain until it finds it
    //     // but as we know this can cause runtime errors so TS says "nope can't do that until I know it's definetely there"
    //     // In short 'as' is used for downcasting or upcasting
    //     const input = (event.target as HTMLFormElement).querySelector('input#columnName') as HTMLInputElement || null;
    //     const columnName = input?.value.trim();

    //     if(!columnName || !userId) return; // don't create a column if the name is blank upon click or if user is not logged in

    //     const newColumnData = await createColumn(userId, boardId, columnName);
    //     onColumnCreated(newColumnData);

    //     if(input) {
    //         input.value = "";
    //     }
    // }

    async function handleNewColumn(event: FormEvent){
        event.preventDefault();

        const trimmerName = columnName.trim();

        if(!trimmerName || !userId) {
            setIsAdding(false);
            return;
        }

        try {
            const newColumnData = await createColumn(userId, boardId, trimmerName);
            onColumnCreated(newColumnData);
            setColumnName("");
            setIsAdding(false);
        } catch (error) {
            console.error("Error creating column:", error);
            alert("Failed to create column. Please try again.");
            setIsAdding(false);
        }
    }

    function handleAddButtonClick() {
        setIsAdding(true);
    }

    function handleCancel() {
        setIsAdding(false);
        setColumnName("");
    }

    return (
        <div className="w-40 p-1">
            {isAdding ? (
                <form onSubmit={handleNewColumn} className="w-80 border border-gray-300 rounded-md shadow bg-white">
                    <input
                        type="text"
                        id="columnName"
                        placeholder="Column Name"
                        value={columnName}
                        onChange={(e) => setColumnName(e.target.value)}
                        ref={inputRef}
                        className="rounded border border-gray-300 p-2 w-full"
                        onBlur={(e) => {
                            // Check if the blur event is because of pressing Enter (which triggers onSubmit)
                            // To prevent immediate cancellation when pressing Enter, use a timeout
                            setTimeout(() => {
                                if (columnName.trim() === "") {
                                    handleCancel();
                                }
                            }, 100);
                        }}
                        onKeyDown={(e) => {
                            if (e.key === "Escape") {
                                handleCancel();
                            }
                        }}
                    />
                </form>
            ) : (
                <button 
                    onClick={handleAddButtonClick} 
                    className="btn-secondary w-full rounded-md shadow flex items-center justify-center"
                    aria-label="Add Column"
                >
                    + Add Column
                </button>
            )}
        </div>
    );
}<End of file>

components/ProtectedRoute.tsx:
<Start of file>
'use client';
import { useAuth } from '@/app/contexts/AuthContext';
import { useRouter } from "next/navigation";
import { useEffect } from 'react';
import Loading from './Loading';

export default function ProtectedRoute({ children }: { children: React.ReactNode }) {
    const { user, loading } = useAuth();
    const router = useRouter();

    useEffect(() => {
        if(!loading && !user) {
            router.push("/");
        }
    }, [user, loading, router]);

    if (loading || !user) return <Loading/>;

    return <>{children}</>;
}<End of file>

components/Login.tsx:
<Start of file>
'use client';
import { useState } from 'react';
import { useAuth } from '@/app/contexts/AuthContext';
import { useRouter } from 'next/navigation';
import GoogleLoginButton from './authentication/GoogleLoginButton';

export default function Login() {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [error, setError] = useState<string | null>(null);
    const { login } = useAuth();
    const router = useRouter();

    async function handleLogin(event: React.FormEvent) {
        event.preventDefault();
        setError(null);

        try{
            await login(email, password); // this is called from the AuthContext within the context of this component passed as AuthContext
            router.push("/home");
        } catch (err: any) {
            switch (err.code) {
                case "auth/user-not-found":
                  setError("No account found with this email. Please register or try a different email.");
                  break;
                case "auth/invalid-credential":
                  setError("Incorrect password. Please try again.");
                  break;
                case "auth/invalid-email":
                  setError("The email address is not valid. Please check and try again.");
                  break;
                case "auth/too-many-requests":
                  setError("Too many login attempts. Please try again later.");
                  break;
                default:
                  setError("An unexpected error occurred. Please try again later.");
                  console.log(err.code);
                  break;
              }
        }
    }

    return (
        <div className="w-80 p-6 mx-auto mt-10 bg-white rounded shadow">
        <h1 className="text-xl font-bold mb-4">Login</h1>
        {error && <p className="text-red-500 mb-4">{error}</p>}
        <form onSubmit={handleLogin}>
          <div className="grid gap-2">
            <input
              type="email"
              placeholder="Email"
              className="rounded border p-2 w-full"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            <input
              type="password"
              placeholder="Password"
              className="rounded border p-2 w-full"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <button type="submit" className="btn-primary w-full">
              Login
            </button>
          </div>
        </form>
        <div className="my-1 text-center text-gray-400"><small>or</small></div>
            <GoogleLoginButton>Login with Google</GoogleLoginButton>
      </div>
    );
}<End of file>

components/cards/CardDetail.tsx:
<Start of file>
'use client';

import { Card } from "@/app/actions/boardActions";
import { updateCard } from "@/app/actions/cardActions";
import { useAuth } from "@/app/contexts/AuthContext";
import { serverTimestamp } from "firebase/firestore";
import { useRouter } from "next/navigation";
import { useState } from "react";


type CardDetailProps = {
    boardId: string;
    card: Card;
}

function CardDetail({ boardId, card } : CardDetailProps){
    const [ isEditingTitle, setIsEditingTitle ] = useState(false);
    const [ isAddingComment, setIsAddintComment ] = useState(false);
    
    const [ cardTitle, setCardTitle ] = useState<string>(card.title);
    const [ cardDescription, setCardDescription ] = useState<string | undefined>(card.description);
    const [ cardComments, setCardComments] = useState<string[] | undefined>(card.comments);
    const [ newComment, setNewComment] = useState<string>("");

    const router = useRouter();
    const { userId } = useAuth();


    function toggleTitleEdit() {
        setIsEditingTitle((prev) => !prev);
    }

    function cancelEditingCard() {
        router.back();
    }

    async function handleSaveCard() {
        if(!userId) return;

        const data: Record<string, any> = {};

        if(cardTitle !== card.title) {
            data.title = cardTitle;
        }

        if(cardDescription !== card.description) {
            data.description = cardDescription;
        }

        if(JSON.stringify(cardComments) !== JSON.stringify(card.comments)) {
            data.comments = cardComments;
        }

        data.updatedAt = serverTimestamp();

        await updateCard(userId, boardId, card.id, data);
        router.back();
    }

    function toggleAddingComment(){
        setIsAddintComment(true);
    }

    function handleDeleteComment(index: number) {
        setCardComments((prev) => {
            if(!prev) return prev;
            const newComments = [...prev];
            newComments.splice(index, 1);
            return newComments;
        });
    }

    return (
        <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-[100]">
            <div className="p-6 max-w-xl bg-white w-[40vh] rounded-md">
                <div>
                {isEditingTitle ? (
                <div className="mb-1">
                    <input
                        className="border w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                        autoFocus
                        value={cardTitle}
                        onChange={(e) => setCardTitle(e.currentTarget.value)}
                        onBlur={() => toggleTitleEdit()}
                        onKeyDown={(e) => {
                            if (e.key === "Enter") {
                                setCardTitle(e.currentTarget.value);
                                toggleTitleEdit();
                            }
                            if (e.key === "Escape") {
                                toggleTitleEdit();
                            }
                        }}
                    />
                </div>
                ) : (
                    <h1 onClick={toggleTitleEdit} className="font-bold text-xl mb-4">{cardTitle}</h1>
                )}
                    
                <textarea className="mt-1 w-full h-32 rounded-md border p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        value={cardDescription || ""} 
                        placeholder="Write description"
                        onChange={(e) => setCardDescription(e.currentTarget.value)}>
                    {cardDescription}
                </textarea>
                    
                <hr className="mt-4"></hr>
                <div className="mt-2">
                    <div className="">
                        <h2 className="font-semibold text-md my-2">Comments</h2>
                        {cardComments && cardComments.length > 0 ? (
                            cardComments.map((comment, index) => (
                                <div key={index} className="flex my-2">
                                    <p className="text-wrap p-2 my-2 border shadow-md shadow-blue-100 rounded hover:shadow-red-200">{comment}</p>
                                    <button onClick={() => handleDeleteComment(index)} className="ml-2 hover:text-3xl hover:ml-1">🗑️</button>
                                </div>
                            ))
                        ) : (
                            <span>There are no comment here</span>
                        )}
                    </div>

                    {isAddingComment ? (
                        <div onBlur={() => {
                            setIsAddintComment(false);
                            setNewComment("");
                        }}>
                            <input
                                autoFocus
                                type="text"
                                className="w-full rounded-md border p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="Type your comment and hit Enter"
                                value={newComment}
                                onChange={(e) => setNewComment(e.currentTarget.value)}
                                onKeyDown={(e) => {
                                if (e.key === "Enter") {
                                    // Append the new comment to existing comments (or create an array if none exist)
                                    setCardComments((prev) =>
                                    prev ? [...prev, newComment] : [newComment]
                                    );
                                    setNewComment("");
                                    setIsAddintComment(false);
                                }
                                }}
                            />
                        </div>
                    ) : (
                        <button onClick={toggleAddingComment} className="mt-4 btn btn-boards"> + Add comment</button> 
                    )}
                    <hr className="mt-4 border-1 border-gray-500"></hr>
                </div>
            </div>

                <div className="mt-4 flex justify-between items-center">
                    <span className="text-xs text-gray-400">{card.updatedAt ? 
                    (`Updated at: ${new Date(card.updatedAt.seconds * 1000).toLocaleString()}`) 
                    : (`Created at: ${new Date(card.createdAt.seconds * 1000).toLocaleString()}`)}</span>

                    <div className="flex justify-end">
                    <button onClick={cancelEditingCard} type="button" className="mr-1 btn btn-red">Cancel</button>
                    <button onClick={handleSaveCard} type="button" className="ml-1 btn btn-primary">Save</button>
                </div>
            </div>
                
        </div>
                
        </div>
    );
}

export default CardDetail;<End of file>

components/Board.tsx:
<Start of file>
import { ReactSortable } from 'react-sortablejs';
import Column from './Column';
import FormColumn from "./forms/FormColumn";
import { Board as BoardType, Card } from '@/app/actions/boardActions';
import { Dispatch, SetStateAction, useState } from 'react';
import { updateColumn } from '@/app/actions/columnActions';
import { useAuth } from '@/app/contexts/AuthContext';
import { Column as ColumnType } from '@/app/actions/columnActions';
import { deleteColumn } from '@/app/actions/columnActions';
import { deleteCard } from '@/app/actions/cardActions';

type BoardProps = {
    boardId: string;
    board: BoardType;
    columns: ColumnType[];
    cards: Card[];
    setCards: Dispatch<SetStateAction<Card[]>>;
}

export default function Board({ boardId, columns, cards, setCards } : BoardProps) {
    const [boardColumns, setBoardColumns] = useState<ColumnType[]>(columns);
    // const [boardCards, setBoardCards] = useState<Card[]>(cards);

    const { userId } = useAuth();

    async function handleDeleteColumn(columnId: string): Promise<void> {
        if (!userId) return;
    
        try {
            const columnToDelete = boardColumns.find(col => col.id === columnId);
            if (!columnToDelete) return;
    
            const cardsInColumn = cards.filter(card => card.columnId === columnId);
            await Promise.all(cardsInColumn.map(card => deleteCard(userId, boardId, card.id)));
    
            await deleteColumn(userId, boardId, columnToDelete.id);
    
            setCards(prev => prev.filter(card => card.columnId !== columnId));
            setBoardColumns(prev => prev.filter(col => col.id !== columnId));
        } catch (error) {
            console.error("Error deleting column:", error);
            alert("Failed to delete column. Please try again.");
        }
    }

    return (
        <div className="flex flex-row gap-4 min-h-[83vh] h-full overflow-x-auto items-start">
            <ReactSortable
                list={boardColumns}
                setList={(sorted) => {
                    setBoardColumns(sorted);
                    sorted.forEach((col, index) => {
                        updateColumn(userId || "", boardId, col.id, { order: index });
                    })
                }}
                group="columns"
                className='flex flex-row gap-4 items-start'
            >
                {boardColumns.map((column) => (
                    <Column 
                        key={column.id}
                        boardId={boardId} 
                        column={column}
                        cards={cards.filter((card) => card.columnId === column.id)}
                        setCards={setCards}
                        onDeleteColumn={handleDeleteColumn}
                    />
                ))}
                <FormColumn boardId={boardId} onColumnCreated={(newCol) => {
                    setBoardColumns([...boardColumns, newCol]);
                }} />
            </ReactSortable>
        </div>
    );
}<End of file>

components/boards/BoardClient.tsx:
<Start of file>
// this is the client part of the dynamic boardId page which is supposed to render on client
'use client';

// Object imports
import { useEffect, useState } from 'react';
import { getBoard, Board as BoardType} from '@/app/actions/boardActions';
import { getColumns } from '@/app/actions/boardActions';
import { getCards, Card } from '@/app/actions/boardActions';
import { Column } from '@/app/actions/columnActions';
import { useSearchParams, useRouter } from 'next/navigation';

// Component imports
import Loading from '@/components/Loading';
import Board from '../Board';
import FormColumn from '../forms/FormColumn';
import CardDetail from '../cards/CardDetail';
import { useAuth } from '@/app/contexts/AuthContext';

import { collection, query, orderBy, onSnapshot } from 'firebase/firestore';
import { db } from '@/app/utils/firebaseConfig';


type BoardClientProps = {
    boardId: string,
};

export default function BoardClient({ boardId } : BoardClientProps) {
    const [board, setBoard] = useState<BoardType | null>(null);
    const [columns, setColumns] = useState<Column[]>([]);
    const [cards, setCards] = useState<Card[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const { userId } = useAuth();
    const searchParams = useSearchParams();
    const cardId = searchParams.get('cardId');

    useEffect(() => {
        async function fetchData() {
            setLoading(true);

            if(!userId) return; // make sure user is authenticated

            try {
                const boardData = await getBoard(userId, boardId);
                const columnData = await getColumns(userId, boardId);
                setBoard(boardData);
                setColumns(columnData);
            } catch (err) {
                console.error("Failed to fetch data for board: ", err);
                setError("Failed to fetch data for board in BoardClient.");
            } finally {
                setLoading(false);
            }
        }
        fetchData();
    }, [userId, boardId]);

    useEffect(() => {
      if(!userId) return;

      const cardsRef = collection(db, `users/${userId}/boards/${boardId}/cards`);
      const q = query(cardsRef, orderBy("order"));

      function unsubscribe() {
        onSnapshot(q, (snapshot) => {
          const updatedCards = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data(),
          })) as Card[];
          setCards(updatedCards);
        },
        (err) => {
          console.error("Error fetching cards in real time: ", err);
        });
      } 

      unsubscribe();
    }, [userId, boardId]);

    function fetchModalCard() : Card | null {
      if(cardId) {
        const foundCard = cards.find(card => card.id === cardId);
        return foundCard || null;
      } else {
        throw new Error("You haven't clicked on card");
      }
    }

    if(loading) return <Loading/>;
    if(error) return <p>{error}</p>;
    if(!board) return <p>Board not found</p>;

    return (
        <div className='flex-none w-full'>
      {/* The board info at the top */}
      <h1 className="text-4xl mb-4">{board.name}</h1>
      <p className="text-gray-600">{board.description}</p>
      <hr />
      <p className="text-sm text-gray-500">
        Created on:{" "}
        {new Date(board.createdAt.seconds * 1000).toLocaleDateString()}
      </p>

      <section>
        {columns.length === 0 ? (
          <div>
            <p>This board has no columns. Create one to get started:</p>
            <FormColumn
              boardId={boardId}
              onColumnCreated={(newColumn : Column) => {
                setColumns([...columns, newColumn]);
              }}
            />
          </div>
        ) : (
          <Board
            board={board}
            boardId={boardId}
            columns={columns}
            cards={cards}
            setCards={setCards}
          />
          
        )}
        {cardId && (() => {
          const fetchedCard = fetchModalCard(); // fetch the exact card from the cards list
          return fetchedCard ? <CardDetail boardId={boardId} card={fetchedCard}/> : null;
        })()}
      </section>
      </div>
    );

}<End of file>

components/Header.tsx:
<Start of file>
'use client';
import Link from 'next/link';
import LogoutButton from './authentication/LogoutButton';
import { getAuth } from 'firebase/auth';
import { useAuth } from '@/app/contexts/AuthContext';

export default function Header() {
    const auth = getAuth();
    const { loading }  = useAuth();
    const user = auth.currentUser;

    if(loading || !user) return null;

    return (
      <header className="sticky top-0 z-50 bg-gray-800 p-4 flex justify-between items-center text-white shadow-md">
          <h1 className="text-2xl font-bold flex items-center space-x-5">
              <Link href="/home" className="logo hover:underline">
                  Trello Clone
              </Link>
              <Link href='/create-board' className='btn-primary px-3 py-1 rounded'>Create</Link>
              <Link href='/home' className='btn-boards px-3 py-1 rounded'>Boards</Link>
          </h1>
          
          <div className="flex space-x-4 items-center">
              {user?.displayName && <span className='font-medium mx-2'>Hi, {user.displayName}</span>}
              <LogoutButton />
          </div>
      </header>
  );
}<End of file>

components/Loading.tsx:
<Start of file>
export default function Loading() {
    return (
        <div className="fixed inset-0 flex items-center justify-center h-screen bg-gray-100 z-50">
            <div className="flex flex-col items-center">
                {/* SVG Spinner */}
                <img src="/4.svg" alt="Loading..." className="h-16 w-16"/>
                <span className="mt-1 text-gray-700">Loading...</span>
            </div>
        </div>
    );
}<End of file>

components/views/LandingPage.tsx:
<Start of file>
'use client'
import Link from 'next/link';

export default function LandingPage() {
    return (
        <div className=" bg-gray-100 flex flex-col justify-center items-center mx-auto">
            <div className="text-center">
                <h1 className="text-6xl font-bold mb-6 text-gray-800">Trello Clone</h1>
                <h2 className="text-2xl font-medium mb-10 text-gray-600">For MVP Masters' Projects</h2>
                <div className="flex space-x-6 justify-center mb-8">
                    <Link href="/login">
                        <button className="btn-primary text-lg px-8 py-4">Login</button>
                    </Link>
                    <Link href="/register">
                        <button className="btn-secondary text-lg px-8 py-4">Register</button>
                    </Link>
                </div>
                <div className="flex flex-col space-y-2">
                    <a href="https://github.com/" target="_blank" rel="noopener noreferrer" className="text-blue-500 underline">
                        GitHub Repository
                    </a>
                    <a href="https://www.linkedin.com/" target="_blank" rel="noopener noreferrer" className="text-blue-500 underline">
                        LinkedIn Profile
                    </a>
                </div>
            </div>
        </div>
    );
}<End of file>

components/authentication/LogoutButton.tsx:
<Start of file>
import { useAuth } from '@/app/contexts/AuthContext';
import { useRouter } from 'next/navigation';

export default function LogoutButton() {
    const { logout } = useAuth();
    const router = useRouter();

    const handleLogout = async () => {
        await logout();
        router.push('/');
    }

    return (
        <button
            onClick={handleLogout}
            className="text-white bg-red-500 px-4 py-2 rounded hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-offset-2"
        >
            Log Out
        </button>
        // <Link href={'/'} onClick={logout} className='text-white bg-red-500 px-4 py-2 rounded hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-offset-2'>
        //     Logout
        // </Link>
    );
}
<End of file>

components/authentication/Register.tsx:
<Start of file>
'use client';
import { useState } from 'react';
import { createUserWithEmailAndPassword, updateProfile, getAuth } from 'firebase/auth';
import { auth } from '@/app/utils/firebaseConfig';
import { useRouter } from 'next/navigation';
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { registrationSchema } from '@/app/utils/validationSchema';
import GoogleLoginButton from './GoogleLoginButton';

type FormData = {
    email: string;
    password: string;
    username: string;
};


export default function Register() {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState(false);
    const router = useRouter();

    // Hook into react-hook-form and use yup schema validation
    const {
        register,
        handleSubmit,
        formState: { errors },
    } = useForm<FormData>({
        resolver: yupResolver(registrationSchema),
    });

    async function handleRegister(data: FormData) {
        console.log("Form data submitted:", data);
        setError(null);
        setSuccess(false);

        try {
            const userCredidential = await createUserWithEmailAndPassword(auth, data.email, data.password);
            const user = userCredidential.user;

            setSuccess(true);
            await updateProfile(user, { displayName: data.username });

            const currAuth = getAuth();
            const currentUserInfo = currAuth.currentUser;
            console.log(currentUserInfo);
            router.push("/login");
        } catch (err: any) {
            switch (err.code) {
                case "auth/email-already-in-use":
                    setError("The email address is already registered. Please use a different email or log in.");
                    break;
                case "auth/weak-password":
                    setError("The password is too weak. Please use a stronger password.");
                    break;
                default:
                    setError("An unexpected error occurred. Please try again later.");
                    break;
            }
        }
    }

    return (
        <div className="w-80 p-6 mx-auto mt-10 bg-white rounded shadow">
        <h1 className="text-xl font-bold mb-4">Register</h1>
        {error && <p className="text-red-500 mb-4">{error}</p>}
        {success && (
            <p className="text-green-500 mb-4">
                Registration successful! You can log in now.
            </p>
            )}
        <form onSubmit={handleSubmit(handleRegister)}>
          <div className="grid gap-2">
            {/* Username Input */}
            <input 
                type='text' 
                placeholder='Username' 
                className={`rounded border p-2 w-full ${errors.username ? "border-red-500" : "border-gray-300"}`}
                {...register("username")}
            />
            {errors.username && (<p className='text-red-500 text-sm'>{errors.username.message}</p>)} 
            {/* Email Input */}
            <input
              type="email"
              placeholder="Email"
              className={`rounded border p-2 w-full ${errors.email ? "border-red-500" : "border-gray-300"}`}
              {...register("email")}
            />
            {errors.email && (
                <p className='text-red-500 text-sm'>{errors.email.message}</p>
            )}
            {/* Password Input */}
            <input
              type="password"
              placeholder="Password"
              className={`rounded border p-2 w-full ${errors.password ? "border-red-500" : "border-gray-300"}`}
              {...register("password")}
            />
            {errors.password && (
                <p className='text-red-500 text-sm'>{errors.password.message}</p>
            )}
            {/* Submit Button */}
            <button type="submit" className="btn-primary w-full">
              Register
            </button>
          </div>
        </form>
        <div className="my-1 text-center text-gray-400"><small>or</small></div>
            <GoogleLoginButton>Register with Google</GoogleLoginButton>
      </div>
    );
}<End of file>

components/authentication/GoogleLoginButton.tsx:
<Start of file>
'use client'
import { signInWithPopup, updateProfile } from 'firebase/auth';
import { auth, googleProvider } from '@/app/utils/firebaseConfig';
import { useRouter } from 'next/navigation';

export default function GoogleLoginButton({ children }:any){
    const router = useRouter();

    async function handleGoogleLoign() {
        try {
            const userCredential = await signInWithPopup(auth, googleProvider);
            const user =userCredential.user;

            // if user doesn't have a display name, derive one from email
            if (!user.displayName && user.email) {
                const username = user.email.split('@')[0];
                await updateProfile(user, { displayName: username });
            }
            
            router.push('/home');
        } catch (error) {
            console.error('Google login failed: ', error);
        }
    }

    return (
        <button onClick={handleGoogleLoign} type='button' className="btn-google w-full text-white bg-red-500 py-2 rounded">
            {children}
        </button>
    );
}<End of file>

components/Column.tsx:
<Start of file>
'use client';

import { ReactSortable } from "react-sortablejs";
import { Dispatch, SetStateAction, useEffect } from "react";
import { useState, useRef } from 'react';
import { Card as CardType } from "@/app/actions/boardActions";
import { createCard } from "@/app/actions/boardActions";
import { Column as ColumnType, updateColumn } from "@/app/actions/columnActions";
import { deleteCard, updateCard } from "@/app/actions/cardActions";
import { useAuth } from "@/app/contexts/AuthContext";
import Card from "./Card";
import Options from "./options/Options";

// Type definitions
type ColumnProps = {
    boardId: string;
    column: ColumnType;
    cards: CardType[];
    setCards: Dispatch<SetStateAction<CardType[]>>;
    onDeleteColumn: (columnId: string) => Promise<void>;
}

export default function Column({ boardId, column, cards, setCards, onDeleteColumn }: ColumnProps) {
    const [isAddingCard, setIsAddingCard] = useState<boolean>(false);
    const [newCardTitle, setNewCardTitle] = useState<string>('');
    const [isEditing, setIsEdditing] = useState(false);
    const inputRef = useRef<HTMLInputElement | null>(null);
    const [columnName, setColumnName] = useState<string>(column.name);
    const { userId } = useAuth();

    useEffect(() => {
        if (isEditing && inputRef.current) {
            inputRef.current.focus();
        }
    }, [isEditing]);


    function handleAddCard() {
        setIsAddingCard(true);
    }

    async function handleCreateCard(keepAdding: boolean = true) {
        if (!newCardTitle.trim()) {
            setIsAddingCard(false);
            return;
        }

        if (!userId) return;

        const newCardData = await createCard(userId, boardId, {
            title: newCardTitle,
            columnId: column.id,
            order: cards.length,
        });

        // setCards((prevState) => [...prevState, newCardData]); removed because of the onSnapshot listener, since just createCard
        // will trigger the listener and will update the state everywhere

        setNewCardTitle("");
        setIsAddingCard(keepAdding);
    }

    async function handleDeleteCard(cardId: string) {
        try {
            await deleteCard(userId || "", boardId, cardId);
            setCards((prevCards) => prevCards.filter(card => card.id !== cardId));
        } catch (error) {
            console.error("Error deleting card:", error);
            alert("Failed to delete card. Please try again.");
        }
    }

    async function handleDeleteColumn() {
        await onDeleteColumn(column.id);
    }

    async function handleEditColumn() {
        setIsEdditing(true);
    }

    async function handleUpdateColumn() {
        const trimmedName = columnName.trim();
        let completedChange = false;

        if (!userId || trimmedName === "") {
            setColumnName(column.name);
            setIsEdditing(false);
            return;
        }

        if (trimmedName !== column.name) {
            try {
                await updateColumn(userId, boardId, column.id, { name: trimmedName });
                completedChange = true;
                setColumnName(trimmedName);
            } catch (error) {
                console.error("Error updating column:", error);
                alert("Failed to update column. Please try again.");
            }
        }

        if (completedChange) {
            setColumnName(trimmedName);
        } else {
            setColumnName(column.name);
        }
        setIsEdditing(false);
    }

    async function handleClearCards() {
        if (!userId) return;
        const deletedCards: string[] = [];

        try {
            for (const card of cards) {
                await deleteCard(userId, boardId, card.id);
                deletedCards.push(card.id);
            }

            setCards((prevCards) => prevCards.filter(card => !deletedCards.includes(card.id)));
        } catch (error) {
            console.log("Cards couldn't be cleared:", error);
            alert("Error while clearing cards.");
        }
    }

    /**
     * Called whenever ReactSortable re-sorts or moves cards into this column.
     * @param sortedCards - The new array of cards in this column after sorting
     * @param newColumnId - The ID of the column that owns these cards
     */
    function setCardsForColumn(sortedCards: CardType[], newColumnId: string) {
        setCards((prevCards: CardType[]) => {
            const updated = [...prevCards];
            
            sortedCards.forEach((sortedCard: CardType, newOrder: number) => {
                const foundCard = updated.find((card) => card.id === sortedCard.id);
                if (foundCard) {
                    foundCard.columnId = newColumnId;
                    foundCard.order = newOrder;
                }
            });
            
            updated.sort((a, b) => {
                if (a.columnId === b.columnId) {
                    return a.order - b.order;
                }
                return 0;
            });

            return updated;
        });

        sortedCards.forEach(async (sortedCard, newOrder) => {
            await updateCard(userId || "", boardId, sortedCard.id, {
                columnId: newColumnId,
                order: newOrder,
            });
        });
    }

    return (
        <div className="flex flex-col h-auto w-80 bg-white rounded-md shadow-md p-3">
            {/* Header */}
            <div className="flex justify-between items-center mb-2">
                {isEditing ? (
                    <input
                        className="border p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                        value={columnName}
                        ref={inputRef}
                        onChange={(e) => setColumnName(e.target.value)}
                        onBlur={() => {
                            handleUpdateColumn();
                        }}
                        onKeyDown={(e) => {
                            if (e.key === "Enter") handleUpdateColumn();
                            if (e.key === "Escape") setIsEdditing(false);
                        }}
                    />
                ) : (
                    <h3 className="font-semibold text-lg">{columnName}</h3>
                )}
                <Options onDelete={handleDeleteColumn} onEdit={handleEditColumn} specialAction={handleClearCards}/>
            </div>

            {/* Cards List */}
            <div className="flex-1 mb-2">
                <ReactSortable
                    list={cards}
                    setList={(updated) => {
                        setCardsForColumn(updated, column.id);
                    }}
                    group="cards"
                    className="flex flex-col space-y-2"
                    ghostClass="opacity-30"
                >
                    {cards.map((card) => (
                        <Card key={card.id} boardId={boardId} card={card} onDelete={handleDeleteCard}/>
                    ))}
                </ReactSortable>
            </div>

            {/* Add Card Button / Input */}
            {isAddingCard ? (
                <div className="mt-2">
                    <input
                        className="border p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                        autoFocus
                        value={newCardTitle}
                        onChange={(e) => setNewCardTitle(e.target.value)}
                        onBlur={() => handleCreateCard(false)}
                        onKeyDown={(e) => {
                            if (e.key === "Enter") {
                                handleCreateCard();
                            }
                        }}
                    />
                </div>
            ) : (
                <button 
                    className="w-full btn-secondary mt-2 p-2 rounded transition-colors" 
                    onClick={handleAddCard}
                >
                    + Add Card
                </button>
            )}
        </div>
    );
}<End of file>

